/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.Services.UserBookingService;
import org.example.entities.Train;
import org.example.entities.User;
import org.example.util.UserServiceUtil;


import java.io.IOException;
import java.util.*;

public class App {


    public static void main(String[] args) {
        System.out.println("Running train booking system");
        Scanner scanner = new Scanner(System.in);
        int option = 0;
        UserBookingService userBookingService = null;
        Boolean isLoggedIn = false;

        try {
            userBookingService = new UserBookingService();  // Initialize service
        } catch (IOException exception) {
            System.out.println("There is something wrong");
            exception.printStackTrace();
            return;
        }

        while (option != 7) {
            System.out.println("Choose Option");
            System.out.println("1. Sign Up");
            System.out.println("2. Login");
            System.out.println("3. Fetch Bookings");
            System.out.println("4. Search Trains");
            System.out.println("5. Book a Seat");
            System.out.println("6. Cancel My Booking");
            System.out.println("7. Exit the app");

            option = scanner.nextInt();
            Train trainSelectedForBooking = new Train();

            switch (option) {
                case 1:
                    // Sign up logic
                    System.out.println("Enter username to signup");
                    String nameToSignUp = scanner.next();
                    System.out.println("Enter the password to signup");
                    String passwordToSignUp = scanner.next();
                    User userToSignUp = new User(nameToSignUp, passwordToSignUp, UserServiceUtil.hashPassword(passwordToSignUp), new ArrayList<>(), UUID.randomUUID().toString());
                    userBookingService.sigUp(userToSignUp);
                    break;

                case 2:
                    // Login logic
                    System.out.println("Enter username to login");
                    String nameToLogIn = scanner.next();
                    System.out.println("Enter the password to login");
                    String passwordToLogIn = scanner.next();
                    User userToLogIn = new User(nameToLogIn, passwordToLogIn, UserServiceUtil.hashPassword(passwordToLogIn), new ArrayList<>(), UUID.randomUUID().toString());
                    userBookingService.setUser(userToLogIn); // <-- Set user, don't create new service

                    if (userBookingService.loginUser()) {
                        System.out.println("Login successful.");
                        isLoggedIn = true;
                    } else {
                        System.out.println("Login failed. Please check username or password.");
                    }
                    break;


                case 3:
                    if (isLoggedIn) {
                        // Fetch bookings logic
                        System.out.println("Fetch your Bookings");
                        userBookingService.fetchBooking();
                        break;
                    } else {
                        System.out.println("You must log in first!");
                        break;
                    }

                case 4:
                    if (isLoggedIn) {
                        // Train search logic
                        System.out.println("Type Your Source Station");
                        String source = scanner.next();
                        System.out.println("Type Your Destination Station");
                        String dest = scanner.next();
                        List<Train> trains = userBookingService.getTrains(source, dest);
                        int index = 1;
                        for (Train t : trains) {
                            System.out.println(index + " train id : " + t.getTrainId());
                            for (Map.Entry<String, String> entry : t.getStationTimes().entrySet()) {
                                System.out.println("station " + entry.getKey() + " time: " + entry.getValue());
                            }
                        }
                        System.out.println("Select a train by typing 1,2,3,....");
                        trainSelectedForBooking = trains.get(scanner.nextInt() - 1);
                        break;
                    } else {
                        System.out.println("You must log in first!");
                        break;
                    }

                case 5:
                    if (isLoggedIn) {
                        // Seat booking logic
                        System.out.println("Select a seat out of these seats");
                        List<List<Integer>> seats = userBookingService.fetchSeats(trainSelectedForBooking);
                        for (List<Integer> row : seats) {
                            for (Integer val : row) {
                                System.out.print(val + " ");
                            }
                            System.out.println();
                        }
                        System.out.println("Select the seat by typing the row and column");
                        System.out.println("Enter the row");
                        int row = scanner.nextInt();
                        System.out.println("Enter the column");
                        int col = scanner.nextInt();
                        System.out.println("Booking your seat....");
                        Boolean booked = userBookingService.bookTrainSeat(trainSelectedForBooking, row, col);
                        if (booked) {
                            System.out.println("Booked! Enjoy your journey");
                        } else {
                            System.out.println("Can't book this seat");
                        }
                        break;
                    } else {
                        System.out.println("You must log in first!");
                        break;
                    }

                default:
                    break;
            }
        }
    }

}
